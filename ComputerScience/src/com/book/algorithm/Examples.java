package com.book.algorithm;

public class Examples {

	private final static double EPSILON = 1e-15;

	/**
	 * Сумма конечного ряда Hn = 1 + 1/2 + 1/3 + ... + 1/n. Эти числа, называемые
	 * гармоническими, часто встречаемые в дискретной математике. Гармонические
	 * числа также являются дискретным аналогом логарифма и апроксимируют площадь
	 * под кривой y = 1/x. n - количество слагаемых в сумме; i - управляющая
	 * переменная цикла; sum - накапливаемая сумма. Метод получает целочисленный
	 * аргумент n и вычисляет значение n-ого гармонического числа. Из
	 * математического анализа известно, что это значениеравно приблизительно ln(n)
	 * + 0.57721 для больших n.
	 */
	public static double harmonicNumber(int n) {
		double sum = 0.0;
		for (int i = 1; i <= n; i++)
			sum += 1.0 / i;
		return sum;
	}

	/**
	 * Вычисление квадратного корня при помощи итерационного метода Ньютона.
	 * Вычисления начинаются с приближения t = c. Если t = c/t, то t равно
	 * квадратному корню из c, и вычисления завершаются. В противном случае текущее
	 * приближение уточняется - t заменяется средним арифметическим t и c/t. c -
	 * аргумент EPSILON - погрешность t - приближённое значение квадратного горня из
	 * c. Метод получает положительное число с плавающей тоской c и вычисляет
	 * квадратный корень из c с точностью до 15 знаков по методу Ньютона.
	 */
	public static double sqrtNewton(double c) {
		double t = c;
		int count = 0;
		while (Math.abs(t - c / t) > EPSILON * t) {
			t = (c / t + t) / 2.0;
			count++;
		}
		//System.out.println("Iteration quantity: " + count);
		return t;
	}

}
